{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport messageApi from \"../api/messageApi\";\nimport { useAppContext } from \"./AppContext\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Inbox = function Inbox() {\n  var navigation = useNavigation();\n  var _useAppContext = useAppContext(),\n    user = _useAppContext.user;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    conversations = _useState2[0],\n    setConversations = _useState2[1];\n  useEffect(function () {\n    var getThreads = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var threads = yield messageApi.getHistory(user._id);\n        setConversations(threads);\n      });\n      return function getThreads() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    getThreads();\n  }, [user._id]);\n  var openChat = function openChat(senderId, receiverId) {\n    navigation.navigate('Send Message', {\n      senderId: user._id,\n      receiverId: user._id === receiverId ? senderId : receiverId\n    });\n  };\n  var renderConversationItem = function renderConversationItem(_ref2) {\n    var item = _ref2.item;\n    var latestMessage = item.messages[item.messages.length - 1];\n    var createdAt = new Date(latestMessage.createdAt);\n    var displayName = user._id !== latestMessage.sender._id ? item.receiver.username : item.sender.username;\n    var messageReceiverId = user._id !== latestMessage.sender._id ? item.receiver._id : item.sender._id;\n    return _jsxs(TouchableOpacity, {\n      style: styles.conversationItem,\n      onPress: function onPress() {\n        return openChat(user._id, item.receiver._id);\n      },\n      children: [_jsxs(View, {\n        style: styles.contentContainer,\n        children: [_jsx(Text, {\n          style: styles.receiverText,\n          children: displayName\n        }), _jsx(Text, {\n          style: styles.messageText,\n          children: latestMessage.text\n        })]\n      }), _jsx(Text, {\n        style: styles.timestampText,\n        children: createdAt.toLocaleString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      })]\n    });\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: conversations && conversations.length > 0 ? _jsx(FlatList, {\n      data: conversations,\n      keyExtractor: function keyExtractor(item) {\n        return item._id ? item._id.toString() : Math.random().toString();\n      },\n      renderItem: renderConversationItem\n    }) : _jsx(Text, {\n      children: \"No conversations yet\"\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16\n  },\n  conversationItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottomWidth: 1,\n    borderBottomColor: '#ccc',\n    paddingVertical: 8\n  },\n  contentContainer: {\n    flex: 1,\n    flexDirection: 'column'\n  },\n  receiverText: {\n    fontWeight: 'bold',\n    fontSize: 16,\n    marginBottom: 4\n  },\n  timestampText: {\n    color: '#888'\n  }\n});\nexport default Inbox;","map":{"version":3,"names":["React","useEffect","useState","View","FlatList","TouchableOpacity","Text","StyleSheet","messageApi","useAppContext","useNavigation","jsx","_jsx","jsxs","_jsxs","Inbox","navigation","_useAppContext","user","_useState","_useState2","_slicedToArray","conversations","setConversations","getThreads","_ref","_asyncToGenerator","threads","getHistory","_id","apply","arguments","openChat","senderId","receiverId","navigate","renderConversationItem","_ref2","item","latestMessage","messages","length","createdAt","Date","displayName","sender","receiver","username","messageReceiverId","style","styles","conversationItem","onPress","children","contentContainer","receiverText","messageText","text","timestampText","toLocaleString","hour","minute","container","data","keyExtractor","toString","Math","random","renderItem","create","flex","padding","flexDirection","justifyContent","alignItems","borderBottomWidth","borderBottomColor","paddingVertical","fontWeight","fontSize","marginBottom","color"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/components/Inbox.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, FlatList, TouchableOpacity, Text, StyleSheet } from 'react-native';\r\nimport messageApi from '../api/messageApi';\r\nimport { useAppContext } from './AppContext';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst Inbox = () => {\r\n  const navigation = useNavigation();\r\n  const { user } = useAppContext();\r\n  const [conversations, setConversations] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getThreads = async () => {\r\n      const threads = await messageApi.getHistory(user._id);\r\n      setConversations(threads);\r\n    };\r\n    getThreads();\r\n  }, [user._id]);\r\n\r\n  const openChat = (senderId, receiverId) => {\r\n    navigation.navigate('Send Message', {\r\n      senderId: user._id,\r\n      receiverId: user._id === receiverId ? senderId : receiverId\r\n    });\r\n  };\r\n\r\n  const renderConversationItem = ({ item }) => {\r\n    const latestMessage = item.messages[item.messages.length - 1];\r\n    const createdAt = new Date(latestMessage.createdAt);\r\n  \r\n    // Determine the display name based on the comparison\r\n    const displayName =\r\n      user._id !== latestMessage.sender._id\r\n        ? item.receiver.username // Render item.receiver's username when user is the sender\r\n        : item.sender.username; // Render 'David' when user is not the sender\r\n    const messageReceiverId = \r\n      user._id !== latestMessage.sender._id\r\n        ? item.receiver._id\r\n        : item.sender._id\r\n  \r\n    return (\r\n      <TouchableOpacity\r\n        style={styles.conversationItem}\r\n        onPress={() => openChat(user._id, item.receiver._id)}\r\n      >\r\n        <View style={styles.contentContainer}>\r\n          <Text style={styles.receiverText}>{displayName}</Text>\r\n          <Text style={styles.messageText}>{latestMessage.text}</Text>\r\n        </View>\r\n        <Text style={styles.timestampText}>\r\n          {createdAt.toLocaleString([], { hour: '2-digit', minute: '2-digit' })}\r\n        </Text>\r\n        {/* Add more details or styling as needed */}\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {conversations && conversations.length > 0 ? (\r\n        <FlatList\r\n          data={conversations}\r\n          keyExtractor={(item) => (item._id ? item._id.toString() : Math.random().toString())}\r\n          renderItem={renderConversationItem}\r\n        />\r\n      ) : (\r\n        <Text>No conversations yet</Text>\r\n      )}\r\n      {/* You can add a button or other UI elements to create a new conversation */}\r\n      {/* Implement the logic to navigate or show the chat based on user interaction */}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  conversationItem: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#ccc',\r\n    paddingVertical: 8,\r\n  },\r\n  contentContainer: {\r\n    flex: 1,\r\n    flexDirection: 'column',\r\n  },\r\n  receiverText: {\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n    marginBottom: 4,\r\n  },\r\n  timestampText: {\r\n    color: '#888',\r\n  },\r\n});\r\n\r\nexport default Inbox;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}