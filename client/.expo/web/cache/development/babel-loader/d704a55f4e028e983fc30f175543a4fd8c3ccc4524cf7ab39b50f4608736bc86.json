{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _excluded = [\"format\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoImageManipulator from \"./ExpoImageManipulator\";\nimport { SaveFormat } from \"./ImageManipulator.types\";\nimport { validateArguments } from \"./validators\";\nexport function manipulateAsync(_x) {\n  return _manipulateAsync.apply(this, arguments);\n}\nfunction _manipulateAsync() {\n  _manipulateAsync = _asyncToGenerator(function* (uri) {\n    var actions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var saveOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!ExpoImageManipulator.manipulateAsync) {\n      throw new UnavailabilityError('ImageManipulator', 'manipulateAsync');\n    }\n    validateArguments(uri, actions, saveOptions);\n    var _saveOptions$format = saveOptions.format,\n      format = _saveOptions$format === void 0 ? SaveFormat.JPEG : _saveOptions$format,\n      rest = _objectWithoutProperties(saveOptions, _excluded);\n    return yield ExpoImageManipulator.manipulateAsync(uri, actions, _objectSpread({\n      format: format\n    }, rest));\n  });\n  return _manipulateAsync.apply(this, arguments);\n}\nexport * from \"./ImageManipulator.types\";","map":{"version":3,"names":["UnavailabilityError","ExpoImageManipulator","SaveFormat","validateArguments","manipulateAsync","_x","_manipulateAsync","apply","arguments","_asyncToGenerator","uri","actions","length","undefined","saveOptions","_saveOptions$format","format","JPEG","rest","_objectWithoutProperties","_excluded","_objectSpread"],"sources":["C:\\Users\\dyarb\\batcave\\Meetup_2.0\\client\\node_modules\\expo-image-manipulator\\src\\ImageManipulator.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoImageManipulator from './ExpoImageManipulator';\nimport { Action, ImageResult, SaveFormat, SaveOptions } from './ImageManipulator.types';\nimport { validateArguments } from './validators';\n\n// @needsAudit\n/**\n * Manipulate the image provided via `uri`. Available modifications are rotating, flipping (mirroring),\n * resizing and cropping. Each invocation results in a new file. With one invocation you can provide\n * a set of actions to perform over the image. Overwriting the source file would not have an effect\n * in displaying the result as images are cached.\n * @param uri URI of the file to manipulate. Should be on the local file system or a base64 data URI.\n * @param actions An array of objects representing manipulation options. Each object should have\n * __only one__ of the keys that corresponds to specific transformation.\n * @param saveOptions A map defining how modified image should be saved.\n * @return Promise which fulfils with [`ImageResult`](#imageresult) object.\n */\nexport async function manipulateAsync(\n  uri: string,\n  actions: Action[] = [],\n  saveOptions: SaveOptions = {}\n): Promise<ImageResult> {\n  if (!ExpoImageManipulator.manipulateAsync) {\n    throw new UnavailabilityError('ImageManipulator', 'manipulateAsync');\n  }\n\n  validateArguments(uri, actions, saveOptions);\n\n  const { format = SaveFormat.JPEG, ...rest } = saveOptions;\n  return await ExpoImageManipulator.manipulateAsync(uri, actions, { format, ...rest });\n}\n\nexport * from './ImageManipulator.types';\n"],"mappings":";;;;;;AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,oBAAoB;AAC3B,SAA8BC,UAAU;AACxC,SAASC,iBAAiB;AAc1B,gBAAsBC,eAAeA,CAAAC,EAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAapC,SAAAF,iBAAA;EAAAA,gBAAA,GAAAG,iBAAA,CAbM,WACLC,GAAW,EAEkB;IAAA,IAD7BC,OAAA,GAAAH,SAAA,CAAAI,MAAA,QAAAJ,SAAA,QAAAK,SAAA,GAAAL,SAAA,MAAoB,EAAE;IAAA,IACtBM,WAAA,GAAAN,SAAA,CAAAI,MAAA,QAAAJ,SAAA,QAAAK,SAAA,GAAAL,SAAA,MAA2B,EAAE;IAE7B,IAAI,CAACP,oBAAoB,CAACG,eAAe,EAAE;MACzC,MAAM,IAAIJ,mBAAmB,CAAC,kBAAkB,EAAE,iBAAiB,CAAC;;IAGtEG,iBAAiB,CAACO,GAAG,EAAEC,OAAO,EAAEG,WAAW,CAAC;IAE5C,IAAAC,mBAAA,GAA8CD,WAAW,CAAjDE,MAAM;MAANA,MAAM,GAAAD,mBAAA,cAAGb,UAAU,CAACe,IAAI,GAAAF,mBAAA;MAAKG,IAAI,GAAAC,wBAAA,CAAKL,WAAW,EAAAM,SAAA;IACzD,aAAanB,oBAAoB,CAACG,eAAe,CAACM,GAAG,EAAEC,OAAO,EAAAU,aAAA;MAAIL,MAAM,EAANA;IAAM,GAAKE,IAAI,CAAE,CAAC;EACtF,CAAC;EAAA,OAAAZ,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED"},"metadata":{},"sourceType":"module","externalDependencies":[]}