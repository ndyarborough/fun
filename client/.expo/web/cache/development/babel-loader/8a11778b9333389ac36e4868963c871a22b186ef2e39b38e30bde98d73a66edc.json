{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport messageApi from \"../api/messageApi\";\nimport { useAppContext } from \"./AppContext\";\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Inbox = function Inbox() {\n  var navigation = useNavigation();\n  var _useAppContext = useAppContext(),\n    user = _useAppContext.user;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    conversations = _useState2[0],\n    setConversations = _useState2[1];\n  var getThreads = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var threads = yield messageApi.getHistory(user._id);\n      setConversations(threads);\n    });\n    return function getThreads() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    getThreads();\n  }, [user._id]);\n  useFocusEffect(React.useCallback(function () {\n    getThreads();\n  }, [user._id]));\n  var openChat = function openChat(senderId, receiverId) {\n    navigation.navigate('Send Message', {\n      senderId: user._id,\n      receiverId: user._id === receiverId ? senderId : receiverId\n    });\n  };\n  var renderConversationItem = function renderConversationItem(_ref2) {\n    var item = _ref2.item;\n    var latestMessage = item.messages[item.messages.length - 1];\n    var createdAt = new Date(latestMessage.createdAt);\n    var currentUser = user;\n    var sender = latestMessage.sender;\n    var receiver = latestMessage.receiver;\n    var displayName = currentUser._id === sender._id ? receiver.username : sender.username;\n    var messageReceiverId = currentUser._id === sender._id ? receiver._id : sender._id;\n    var messageText = currentUser._id === sender._id ? 'You: ' + latestMessage.text : latestMessage.text;\n    return _jsxs(TouchableOpacity, {\n      style: styles.conversationItem,\n      onPress: function onPress() {\n        return openChat(currentUser._id, messageReceiverId);\n      },\n      children: [_jsxs(View, {\n        style: styles.contentContainer,\n        children: [_jsx(Text, {\n          style: styles.receiverText,\n          children: displayName\n        }), _jsx(Text, {\n          style: styles.messageText,\n          children: messageText\n        })]\n      }), _jsx(Text, {\n        style: styles.timestampText,\n        children: createdAt.toLocaleString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      })]\n    });\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: conversations && conversations.length > 0 ? _jsx(FlatList, {\n      data: conversations,\n      keyExtractor: function keyExtractor(item) {\n        return item._id ? item._id.toString() : Math.random().toString();\n      },\n      renderItem: renderConversationItem\n    }) : _jsx(Text, {\n      children: \"No conversations yet\"\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16\n  },\n  conversationItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottomWidth: 1,\n    borderBottomColor: '#ccc',\n    paddingVertical: 8\n  },\n  contentContainer: {\n    flex: 1,\n    flexDirection: 'column'\n  },\n  receiverText: {\n    fontWeight: 'bold',\n    fontSize: 16,\n    marginBottom: 4\n  },\n  timestampText: {\n    color: '#888'\n  }\n});\nexport default Inbox;","map":{"version":3,"names":["React","useEffect","useState","View","FlatList","TouchableOpacity","Text","StyleSheet","messageApi","useAppContext","useNavigation","useFocusEffect","jsx","_jsx","jsxs","_jsxs","Inbox","navigation","_useAppContext","user","_useState","_useState2","_slicedToArray","conversations","setConversations","getThreads","_ref","_asyncToGenerator","threads","getHistory","_id","apply","arguments","useCallback","openChat","senderId","receiverId","navigate","renderConversationItem","_ref2","item","latestMessage","messages","length","createdAt","Date","currentUser","sender","receiver","displayName","username","messageReceiverId","messageText","text","style","styles","conversationItem","onPress","children","contentContainer","receiverText","timestampText","toLocaleString","hour","minute","container","data","keyExtractor","toString","Math","random","renderItem","create","flex","padding","flexDirection","justifyContent","alignItems","borderBottomWidth","borderBottomColor","paddingVertical","fontWeight","fontSize","marginBottom","color"],"sources":["C:/Users/dyarb/batcave/Meetup/client/components/Inbox.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, FlatList, TouchableOpacity, Text, StyleSheet } from 'react-native';\r\nimport messageApi from '../api/messageApi';\r\nimport { useAppContext } from './AppContext';\r\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\r\n\r\nconst Inbox = () => {\r\n  const navigation = useNavigation();\r\n  const { user } = useAppContext();\r\n  const [conversations, setConversations] = useState(null);\r\n\r\n  const getThreads = async () => {\r\n    const threads = await messageApi.getHistory(user._id);\r\n    setConversations(threads);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getThreads();\r\n  }, [user._id]);\r\n\r\n  useFocusEffect(\r\n    React.useCallback(() => {\r\n      getThreads();\r\n    }, [user._id])\r\n  );\r\n\r\n  const openChat = (senderId, receiverId) => {\r\n    navigation.navigate('Send Message', {\r\n      senderId: user._id,\r\n      receiverId: user._id === receiverId ? senderId : receiverId\r\n    });\r\n  };\r\n\r\n  const renderConversationItem = ({ item }) => {\r\n    const latestMessage = item.messages[item.messages.length - 1];\r\n    const createdAt = new Date(latestMessage.createdAt);\r\n  \r\n    const currentUser = user;\r\n    const sender = latestMessage.sender;\r\n    const receiver = latestMessage.receiver;\r\n  \r\n    // Determine the display name based on the comparison\r\n    const displayName =\r\n      currentUser._id === sender._id\r\n        ? receiver.username\r\n        : sender.username;\r\n  \r\n    // Determine the message receiver ID based on the comparison\r\n    const messageReceiverId =\r\n      currentUser._id === sender._id\r\n        ? receiver._id\r\n        : sender._id;\r\n\r\n    const messageText = \r\n      currentUser._id === sender._id\r\n        ? 'You: ' + latestMessage.text\r\n        : latestMessage.text\r\n  \r\n    return (\r\n      <TouchableOpacity\r\n        style={styles.conversationItem}\r\n        onPress={() => openChat(currentUser._id, messageReceiverId)}\r\n      >\r\n        <View style={styles.contentContainer}>\r\n          <Text style={styles.receiverText}>{displayName}</Text>\r\n          <Text style={styles.messageText}>{messageText}</Text>\r\n        </View>\r\n        <Text style={styles.timestampText}>\r\n          {createdAt.toLocaleString([], { hour: '2-digit', minute: '2-digit' })}\r\n        </Text>\r\n        {/* Add more details or styling as needed */}\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n  \r\n\r\n  \r\n  \r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {conversations && conversations.length > 0 ? (\r\n        <FlatList\r\n          data={conversations}\r\n          keyExtractor={(item) => (item._id ? item._id.toString() : Math.random().toString())}\r\n          renderItem={renderConversationItem}\r\n        />\r\n      ) : (\r\n        <Text>No conversations yet</Text>\r\n      )}\r\n      {/* You can add a button or other UI elements to create a new conversation */}\r\n      {/* Implement the logic to navigate or show the chat based on user interaction */}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  conversationItem: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#ccc',\r\n    paddingVertical: 8,\r\n  },\r\n  contentContainer: {\r\n    flex: 1,\r\n    flexDirection: 'column',\r\n  },\r\n  receiverText: {\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n    marginBottom: 4,\r\n  },\r\n  timestampText: {\r\n    color: '#888',\r\n  },\r\n});\r\n\r\nexport default Inbox;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}