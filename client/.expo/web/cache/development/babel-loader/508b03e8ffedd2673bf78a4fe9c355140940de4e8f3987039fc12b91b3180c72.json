{"ast":null,"code":"import { getContext } from \"../utils/getContext.web\";\nfunction sizeFromAngle(width, height, angle) {\n  var radians = angle * Math.PI / 180;\n  var c = Math.cos(radians);\n  var s = Math.sin(radians);\n  if (s < 0) {\n    s = -s;\n  }\n  if (c < 0) {\n    c = -c;\n  }\n  return {\n    width: height * s + width * c,\n    height: height * c + width * s\n  };\n}\nexport default (function (canvas, degrees) {\n  var _sizeFromAngle = sizeFromAngle(canvas.width, canvas.height, degrees),\n    width = _sizeFromAngle.width,\n    height = _sizeFromAngle.height;\n  var result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n  var context = getContext(result);\n  context.translate(result.width / 2, result.height / 2);\n  var radians = degrees * Math.PI / 180;\n  context.rotate(radians);\n  context.drawImage(canvas, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n  return result;\n});","map":{"version":3,"names":["getContext","sizeFromAngle","width","height","angle","radians","Math","PI","c","cos","s","sin","canvas","degrees","_sizeFromAngle","result","document","createElement","context","translate","rotate","drawImage"],"sources":["C:\\Users\\dyarb\\batcave\\Meetup_2.0\\client\\node_modules\\expo-image-manipulator\\src\\actions\\RotateAction.web.ts"],"sourcesContent":["import { ActionRotate } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nfunction sizeFromAngle(\n  width: number,\n  height: number,\n  angle: number\n): { width: number; height: number } {\n  const radians = (angle * Math.PI) / 180;\n  let c = Math.cos(radians);\n  let s = Math.sin(radians);\n  if (s < 0) {\n    s = -s;\n  }\n  if (c < 0) {\n    c = -c;\n  }\n  return { width: height * s + width * c, height: height * c + width * s };\n}\n\nexport default (canvas: HTMLCanvasElement, degrees: ActionRotate['rotate']) => {\n  const { width, height } = sizeFromAngle(canvas.width, canvas.height, degrees);\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const context = getContext(result);\n\n  // Set the origin to the center of the image\n  context.translate(result.width / 2, result.height / 2);\n\n  // Rotate the canvas around the origin\n  const radians = (degrees * Math.PI) / 180;\n  context.rotate(radians);\n\n  // Draw the image\n  context.drawImage(canvas, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n\n  return result;\n};\n"],"mappings":"AACA,SAASA,UAAU;AAEnB,SAASC,aAAaA,CACpBC,KAAa,EACbC,MAAc,EACdC,KAAa;EAEb,IAAMC,OAAO,GAAID,KAAK,GAAGE,IAAI,CAACC,EAAE,GAAI,GAAG;EACvC,IAAIC,CAAC,GAAGF,IAAI,CAACG,GAAG,CAACJ,OAAO,CAAC;EACzB,IAAIK,CAAC,GAAGJ,IAAI,CAACK,GAAG,CAACN,OAAO,CAAC;EACzB,IAAIK,CAAC,GAAG,CAAC,EAAE;IACTA,CAAC,GAAG,CAACA,CAAC;;EAER,IAAIF,CAAC,GAAG,CAAC,EAAE;IACTA,CAAC,GAAG,CAACA,CAAC;;EAER,OAAO;IAAEN,KAAK,EAAEC,MAAM,GAAGO,CAAC,GAAGR,KAAK,GAAGM,CAAC;IAAEL,MAAM,EAAEA,MAAM,GAAGK,CAAC,GAAGN,KAAK,GAAGQ;EAAC,CAAE;AAC1E;AAEA,gBAAe,UAACE,MAAyB,EAAEC,OAA+B,EAAI;EAC5E,IAAAC,cAAA,GAA0Bb,aAAa,CAACW,MAAM,CAACV,KAAK,EAAEU,MAAM,CAACT,MAAM,EAAEU,OAAO,CAAC;IAArEX,KAAK,GAAAY,cAAA,CAALZ,KAAK;IAAEC,MAAM,GAAAW,cAAA,CAANX,MAAM;EAErB,IAAMY,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/CF,MAAM,CAACb,KAAK,GAAGA,KAAK;EACpBa,MAAM,CAACZ,MAAM,GAAGA,MAAM;EAEtB,IAAMe,OAAO,GAAGlB,UAAU,CAACe,MAAM,CAAC;EAGlCG,OAAO,CAACC,SAAS,CAACJ,MAAM,CAACb,KAAK,GAAG,CAAC,EAAEa,MAAM,CAACZ,MAAM,GAAG,CAAC,CAAC;EAGtD,IAAME,OAAO,GAAIQ,OAAO,GAAGP,IAAI,CAACC,EAAE,GAAI,GAAG;EACzCW,OAAO,CAACE,MAAM,CAACf,OAAO,CAAC;EAGvBa,OAAO,CAACG,SAAS,CAACT,MAAM,EAAE,CAACA,MAAM,CAACV,KAAK,GAAG,CAAC,EAAE,CAACU,MAAM,CAACT,MAAM,GAAG,CAAC,EAAES,MAAM,CAACV,KAAK,EAAEU,MAAM,CAACT,MAAM,CAAC;EAE7F,OAAOY,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}