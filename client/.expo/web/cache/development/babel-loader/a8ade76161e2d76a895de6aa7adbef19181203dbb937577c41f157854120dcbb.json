{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { apiBaseUrl } from \"../utils/apiUtils\";\nimport { localTime, localDate } from \"../utils/formatFunctions\";\nvar eventApi = {\n  getEvent: function () {\n    var _getEvent = _asyncToGenerator(function* (eventId) {\n      var response = yield fetch(`${apiBaseUrl}/event/fetch/${eventId}`);\n      var events = yield response.json();\n      return events;\n    });\n    function getEvent(_x) {\n      return _getEvent.apply(this, arguments);\n    }\n    return getEvent;\n  }(),\n  getEvents: function () {\n    var _getEvents = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/event/fetch`);\n        var events = yield response.json();\n        return events;\n      } catch (error) {\n        console.error('Error fetching events:', error);\n        throw error;\n      }\n    });\n    function getEvents() {\n      return _getEvents.apply(this, arguments);\n    }\n    return getEvents;\n  }(),\n  create: function () {\n    var _create = _asyncToGenerator(function* (formData) {\n      try {\n        var requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(formData)\n        };\n        var response = yield fetch(`${apiBaseUrl}/event/create`, requestOptions);\n        if (!response.ok) {\n          throw new Error(`Failed to create event. Status: ${response.status}`);\n        }\n        var event = yield response.json();\n        return event;\n      } catch (error) {\n        console.error('Error creating event:', error.message);\n        throw error;\n      }\n    });\n    function create(_x2) {\n      return _create.apply(this, arguments);\n    }\n    return create;\n  }(),\n  update: function () {\n    var _update = _asyncToGenerator(function* (eventId, formData) {\n      var requestOptions = {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      };\n      var response = yield fetch(`${apiBaseUrl}/event/update/${eventId}`, requestOptions);\n      var updatedEvent = yield response.json();\n      return updatedEvent;\n    });\n    function update(_x3, _x4) {\n      return _update.apply(this, arguments);\n    }\n    return update;\n  }(),\n  rsvp: function () {\n    var _rsvp = _asyncToGenerator(function* (eventId, userId) {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/event/rsvp/${eventId}/${userId}`, {\n          method: 'POST'\n        });\n        if (response.ok) {\n          if (response.status === 200) {\n            return 'RSVP';\n          }\n          if (response.status === 201) {\n            return 'UNRSVP';\n          }\n        } else {\n          var error = yield response.json();\n          throw new Error(error.message);\n        }\n      } catch (error) {\n        console.error('Error RSVPing to event:', error);\n        throw new Error('Failed to RSVP to event');\n      }\n    });\n    function rsvp(_x5, _x6) {\n      return _rsvp.apply(this, arguments);\n    }\n    return rsvp;\n  }(),\n  setInterested: function () {\n    var _setInterested = _asyncToGenerator(function* (eventId, userId) {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/event/setInterested/${eventId}/${userId}`, {\n          method: 'POST'\n        });\n        console.log(response);\n      } catch (error) {\n        console.error('Error RSVPing to event:', error);\n        throw new Error('Failed to RSVP to event');\n      }\n    });\n    function setInterested(_x7, _x8) {\n      return _setInterested.apply(this, arguments);\n    }\n    return setInterested;\n  }(),\n  delete: function () {\n    var _delete2 = _asyncToGenerator(function* (eventId, userId) {\n      var requestOptions = {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      var response = yield fetch(`${apiBaseUrl}/event/delete/${eventId}/${userId}`, requestOptions);\n      if (response.status === 200) {\n        var result = yield response.json();\n        return result;\n      } else {\n        throw new Error('Failed to delete event');\n      }\n    });\n    function _delete(_x9, _x10) {\n      return _delete2.apply(this, arguments);\n    }\n    return _delete;\n  }(),\n  reportEvent: function () {\n    var _reportEvent = _asyncToGenerator(function* (eventId, reportData) {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/event/report`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            eventId: eventId,\n            reportData: reportData\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      } catch (error) {\n        console.error('Error reporting event:', error);\n        throw error;\n      }\n    });\n    function reportEvent(_x11, _x12) {\n      return _reportEvent.apply(this, arguments);\n    }\n    return reportEvent;\n  }(),\n  getRsvpList: function () {\n    var _getRsvpList = _asyncToGenerator(function* (eventId) {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/event/${eventId}/rsvps`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch RSVP list');\n        }\n        var data = yield response.json();\n        return data;\n      } catch (error) {\n        console.error('Error fetching RSVP list:', error);\n        throw error;\n      }\n    });\n    function getRsvpList(_x13) {\n      return _getRsvpList.apply(this, arguments);\n    }\n    return getRsvpList;\n  }()\n};\nexport default eventApi;","map":{"version":3,"names":["apiBaseUrl","localTime","localDate","eventApi","getEvent","_getEvent","_asyncToGenerator","eventId","response","fetch","events","json","_x","apply","arguments","getEvents","_getEvents","error","console","create","_create","formData","requestOptions","method","headers","body","JSON","stringify","ok","Error","status","event","message","_x2","update","_update","updatedEvent","_x3","_x4","rsvp","_rsvp","userId","_x5","_x6","setInterested","_setInterested","log","_x7","_x8","delete","_delete2","result","_delete","_x9","_x10","reportEvent","_reportEvent","reportData","_x11","_x12","getRsvpList","_getRsvpList","data","_x13"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/api/eventApi.js"],"sourcesContent":["import { apiBaseUrl } from '../utils/apiUtils';\r\nimport { localTime, localDate } from '../utils/formatFunctions';\r\n\r\nconst eventApi = {\r\n  getEvent: async (eventId) => {\r\n    const response = await fetch(`${apiBaseUrl}/event/fetch/${eventId}`);\r\n\r\n    const events = await response.json();\r\n    return events;\r\n  },\r\n  getEvents: async () => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/event/fetch`);\r\n      const events = await response.json();\r\n\r\n      return events;\r\n    } catch (error) {\r\n      console.error('Error fetching events:', error);\r\n      throw error; // Rethrow the error to handle it in the component\r\n    }\r\n  },\r\n  create: async (formData) => {\r\n    try {\r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(formData),\r\n      };\r\n\r\n      const response = await fetch(`${apiBaseUrl}/event/create`, requestOptions);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to create event. Status: ${response.status}`);\r\n      }\r\n\r\n      const event = await response.json();\r\n      return event;\r\n    } catch (error) {\r\n      console.error('Error creating event:', error.message);\r\n      throw error; // Re-throw the error for the caller to handle\r\n    }\r\n  },\r\n\r\n\r\n  update: async (eventId, formData) => {\r\n    const requestOptions = {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(formData),\r\n    }\r\n\r\n    const response = await fetch(`${apiBaseUrl}/event/update/${eventId}`, requestOptions);\r\n    const updatedEvent = await response.json();\r\n    return updatedEvent;\r\n  },\r\n\r\n  rsvp: async (eventId, userId) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/event/rsvp/${eventId}/${userId}`, {\r\n        method: 'POST',\r\n      });\r\n  \r\n      if (response.ok) {\r\n        if (response.status === 200) {\r\n          return 'RSVP';\r\n        }\r\n        if (response.status === 201) {\r\n          return 'UNRSVP';\r\n        }\r\n      } else {\r\n        const error = await response.json();\r\n        throw new Error(error.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error RSVPing to event:', error);\r\n      throw new Error('Failed to RSVP to event');\r\n    }\r\n  },\r\n  setInterested: async (eventId, userId) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/event/setInterested/${eventId}/${userId}`, {\r\n        method: 'POST',\r\n      });\r\n      console.log(response)\r\n      // if (response.ok) {\r\n      //   if (response.status === 200) {\r\n      //     return 'RSVP';\r\n      //   }\r\n      //   if (response.status === 201) {\r\n      //     return 'UNRSVP';\r\n      //   }\r\n      // } else {\r\n      //   const error = await response.json();\r\n      //   throw new Error(error.message);\r\n      // }\r\n    } catch (error) {\r\n      console.error('Error RSVPing to event:', error);\r\n      throw new Error('Failed to RSVP to event');\r\n    }\r\n  },\r\n  \r\n\r\n  delete: async (eventId, userId) => {\r\n    const requestOptions = {\r\n      method: 'DELETE', // Change this to 'DELETE'\r\n      headers: { 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    const response = await fetch(`${apiBaseUrl}/event/delete/${eventId}/${userId}`, requestOptions); // Adjust the endpoint\r\n\r\n    if (response.status === 200) {\r\n      const result = await response.json();\r\n      return result;\r\n    } else {\r\n      throw new Error('Failed to delete event');\r\n    }\r\n  },\r\n  reportEvent: async (eventId, reportData) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/event/report`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          eventId,\r\n          reportData,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('Error reporting event:', error);\r\n      throw error; // Rethrow the error for the caller to handle\r\n    }\r\n  },\r\n  getRsvpList: async (eventId) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/event/${eventId}/rsvps`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch RSVP list');\r\n      }\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching RSVP list:', error);\r\n      throw error;\r\n    }\r\n  },\r\n}\r\n\r\nexport default eventApi;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}