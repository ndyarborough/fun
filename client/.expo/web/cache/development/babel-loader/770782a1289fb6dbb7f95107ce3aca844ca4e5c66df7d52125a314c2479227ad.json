{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { apiBaseUrl } from \"../utils/apiUtils\";\nvar messageApi = {\n  sendMessage: function () {\n    var _sendMessage = _asyncToGenerator(function* (_ref) {\n      var sender = _ref.sender,\n        receiver = _ref.receiver,\n        text = _ref.text;\n      try {\n        var response = yield fetch(`${apiBaseUrl}/messages/send`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            sender: sender,\n            receiver: receiver,\n            text: text\n          })\n        });\n        var data = yield response.json();\n        if (response.ok) {\n          return data;\n        } else {\n          throw new Error(data.error || 'Error sending message');\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n        throw new Error('Error sending message');\n      }\n    });\n    function sendMessage(_x) {\n      return _sendMessage.apply(this, arguments);\n    }\n    return sendMessage;\n  }(),\n  getThread: function () {\n    var _getThread = _asyncToGenerator(function* (senderId, receiverId) {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/messages/${senderId}/${receiverId}`);\n        var data = yield response.json();\n        if (response.ok) {\n          return data;\n        } else {\n          throw new Error(data.error || 'Error fetching thread');\n        }\n      } catch (error) {\n        console.error('Error fetching thread:', error);\n        throw new Error('Error fetching thread');\n      }\n    });\n    function getThread(_x2, _x3) {\n      return _getThread.apply(this, arguments);\n    }\n    return getThread;\n  }(),\n  getHistory: function () {\n    var _getHistory = _asyncToGenerator(function* (userId) {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/messages/${userId}`);\n        var data = yield response.json();\n        if (response.ok) {\n          var threads = {};\n          data.forEach(function (message) {\n            var senderId = message.sender._id;\n            var receiverId = message.receiver._id;\n            var threadId = [senderId, receiverId].sort().join('-');\n            if (!threads[threadId]) {\n              threads[threadId] = {\n                sender: message.sender,\n                receiver: message.receiver,\n                messages: []\n              };\n            }\n            threads[threadId].messages.push({\n              _id: message._id,\n              text: message.text,\n              createdAt: message.createdAt,\n              sender: message.sender,\n              receiver: message.receiver\n            });\n          });\n          var sortedThreads = Object.values(threads).sort(function (a, b) {\n            var aDate = new Date(a.messages[a.messages.length - 1].createdAt);\n            var bDate = new Date(b.messages[b.messages.length - 1].createdAt);\n            return bDate - aDate;\n          });\n          return sortedThreads;\n        } else {\n          throw new Error(data.error || 'Error fetching message history');\n        }\n      } catch (error) {\n        console.error('Error fetching message history:', error);\n        throw new Error('Error fetching message history');\n      }\n    });\n    function getHistory(_x4) {\n      return _getHistory.apply(this, arguments);\n    }\n    return getHistory;\n  }()\n};\nexport default messageApi;","map":{"version":3,"names":["apiBaseUrl","messageApi","sendMessage","_sendMessage","_asyncToGenerator","_ref","sender","receiver","text","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","console","_x","apply","arguments","getThread","_getThread","senderId","receiverId","_x2","_x3","getHistory","_getHistory","userId","threads","forEach","message","_id","threadId","sort","join","messages","push","createdAt","sortedThreads","Object","values","a","b","aDate","Date","length","bDate","_x4"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/api/messageApi.js"],"sourcesContent":["// api/messageApi.js\r\n\r\nimport { apiBaseUrl } from \"../utils/apiUtils\";\r\n\r\nconst messageApi = {\r\n  sendMessage: async ({ sender, receiver, text }) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/messages/send`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ sender, receiver, text }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        return data;\r\n      } else {\r\n        throw new Error(data.error || 'Error sending message');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      throw new Error('Error sending message');\r\n    }\r\n  },\r\n\r\n  getThread: async (senderId, receiverId) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/messages/${senderId}/${receiverId}`);\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        return data;\r\n      } else {\r\n        throw new Error(data.error || 'Error fetching thread');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching thread:', error);\r\n      throw new Error('Error fetching thread');\r\n    }\r\n  },\r\n\r\n  getHistory: async (userId) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/messages/${userId}`);\r\n      const data = await response.json();\r\n  \r\n      if (response.ok) {\r\n        const threads = {};\r\n  \r\n        data.forEach((message) => {\r\n          const senderId = message.sender._id;\r\n          const receiverId = message.receiver._id;\r\n  \r\n          // Create a unique thread identifier using both sender and receiver IDs\r\n          const threadId = [senderId, receiverId].sort().join('-');\r\n  \r\n          if (!threads[threadId]) {\r\n            threads[threadId] = {\r\n              sender: message.sender,\r\n              receiver: message.receiver,\r\n              messages: [],\r\n            };\r\n          }\r\n  \r\n          threads[threadId].messages.push({\r\n            _id: message._id,\r\n            text: message.text,\r\n            createdAt: message.createdAt,\r\n            sender: message.sender,\r\n            receiver: message.receiver,\r\n            // Add other message properties if needed\r\n          });\r\n        });\r\n  \r\n        // Convert threads object to array and sort by the most recent message\r\n        const sortedThreads = Object.values(threads).sort((a, b) => {\r\n          const aDate = new Date(a.messages[a.messages.length - 1].createdAt);\r\n          const bDate = new Date(b.messages[b.messages.length - 1].createdAt);\r\n          return bDate - aDate;\r\n        });\r\n  \r\n        return sortedThreads;\r\n      } else {\r\n        throw new Error(data.error || 'Error fetching message history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching message history:', error);\r\n      throw new Error('Error fetching message history');\r\n    }\r\n  },\r\n  \r\n  \r\n\r\n  // You can add more functions for handling media, location, etc. if needed.\r\n};\r\n\r\nexport default messageApi;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}