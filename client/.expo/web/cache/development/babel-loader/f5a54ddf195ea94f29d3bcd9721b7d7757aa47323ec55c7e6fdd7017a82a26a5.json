{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TimePicker = function TimePicker(_ref) {\n  var label = _ref.label,\n    time = _ref.time,\n    onChange = _ref.onChange;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    show = _useState2[0],\n    setShow = _useState2[1];\n  var _useState3 = useState(time),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedTime = _useState4[0],\n    setSelectedTime = _useState4[1];\n  var onPickerChange = function onPickerChange(event, selectedTime) {\n    var currentTime = selectedTime || time;\n    onChange(currentTime);\n    if (Platform.OS === 'android') {\n      setShow(false);\n    }\n    setSelectedTime(currentTime);\n  };\n  var togglePicker = function togglePicker() {\n    setShow(!show);\n  };\n  return _jsxs(View, {\n    children: [Platform.OS === 'android' && _jsx(TouchableOpacity, {\n      onPress: togglePicker,\n      children: _jsx(Text, {\n        children: selectedTime ? selectedTime.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        }) : 'Select Time'\n      })\n    }), show && Platform.OS === 'android' && _jsx(DateTimePicker, {\n      testID: \"dateTimePicker\",\n      value: time,\n      mode: \"time\",\n      is24Hour: true,\n      display: \"default\",\n      onChange: onPickerChange\n    }), Platform.OS === 'ios' && _jsx(DateTimePicker, {\n      testID: \"dateTimePicker\",\n      value: time,\n      mode: \"time\",\n      is24Hour: true,\n      display: \"default\",\n      onChange: onPickerChange\n    })]\n  });\n};\nexport default TimePicker;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","Platform","DateTimePicker","jsx","_jsx","jsxs","_jsxs","TimePicker","_ref","label","time","onChange","_useState","_useState2","_slicedToArray","show","setShow","_useState3","_useState4","selectedTime","setSelectedTime","onPickerChange","event","currentTime","OS","togglePicker","children","onPress","toLocaleTimeString","hour","minute","testID","value","mode","is24Hour","display"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/components/TimePicker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, Platform } from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\n\r\nconst TimePicker = ({ label, time, onChange }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [selectedTime, setSelectedTime] = useState(time);\r\n\r\n  const onPickerChange = (event, selectedTime) => {\r\n    const currentTime = selectedTime || time;\r\n    onChange(currentTime);\r\n\r\n    // Close the picker on Android after selecting a time\r\n    if (Platform.OS === 'android') {\r\n      setShow(false);\r\n    }\r\n\r\n    // Update the selected time\r\n    setSelectedTime(currentTime);\r\n  };\r\n\r\n  const togglePicker = () => {\r\n    setShow(!show);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {Platform.OS === 'android' && (\r\n        <TouchableOpacity onPress={togglePicker}>\r\n          <Text>{selectedTime ? selectedTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 'Select Time'}</Text>\r\n        </TouchableOpacity>\r\n      )}\r\n      {show && Platform.OS === 'android' && (\r\n        <DateTimePicker\r\n          testID=\"dateTimePicker\"\r\n          value={time}\r\n          mode=\"time\"\r\n          is24Hour={true}\r\n          display=\"default\"\r\n          onChange={onPickerChange}\r\n        />\r\n      )}\r\n      {Platform.OS === 'ios' && (\r\n        <DateTimePicker\r\n          testID=\"dateTimePicker\"\r\n          value={time}\r\n          mode=\"time\"\r\n          is24Hour={true}\r\n          display=\"default\"\r\n          onChange={onPickerChange}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default TimePicker;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,QAAA;AAExC,OAAOC,cAAc,MAAM,wCAAwC;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEpE,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,IAAA,EAAkC;EAAA,IAA5BC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EACzC,IAAAC,SAAA,GAAwBf,QAAQ,CAAC,KAAK,CAAC;IAAAgB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhCG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EACpB,IAAAI,UAAA,GAAwCpB,QAAQ,CAACa,IAAI,CAAC;IAAAQ,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA/CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EAEpC,IAAMG,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAK,EAAEH,YAAY,EAAK;IAC9C,IAAMI,WAAW,GAAGJ,YAAY,IAAIT,IAAI;IACxCC,QAAQ,CAACY,WAAW,CAAC;IAGrB,IAAItB,QAAQ,CAACuB,EAAE,KAAK,SAAS,EAAE;MAC7BR,OAAO,CAAC,KAAK,CAAC;IAChB;IAGAI,eAAe,CAACG,WAAW,CAAC;EAC9B,CAAC;EAED,IAAME,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACzBT,OAAO,CAAC,CAACD,IAAI,CAAC;EAChB,CAAC;EAED,OACET,KAAA,CAACR,IAAI;IAAA4B,QAAA,GACFzB,QAAQ,CAACuB,EAAE,KAAK,SAAS,IACxBpB,IAAA,CAACJ,gBAAgB;MAAC2B,OAAO,EAAEF,YAAa;MAAAC,QAAA,EACtCtB,IAAA,CAACL,IAAI;QAAA2B,QAAA,EAAEP,YAAY,GAAGA,YAAY,CAACS,kBAAkB,CAAC,EAAE,EAAE;UAAEC,IAAI,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAU,CAAC,CAAC,GAAG;MAAa,CAAO;IAAC,CACzG,CACnB,EACAf,IAAI,IAAId,QAAQ,CAACuB,EAAE,KAAK,SAAS,IAChCpB,IAAA,CAACF,cAAc;MACb6B,MAAM,EAAC,gBAAgB;MACvBC,KAAK,EAAEtB,IAAK;MACZuB,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAE,IAAK;MACfC,OAAO,EAAC,SAAS;MACjBxB,QAAQ,EAAEU;IAAe,CAC1B,CACF,EACApB,QAAQ,CAACuB,EAAE,KAAK,KAAK,IACpBpB,IAAA,CAACF,cAAc;MACb6B,MAAM,EAAC,gBAAgB;MACvBC,KAAK,EAAEtB,IAAK;MACZuB,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAE,IAAK;MACfC,OAAO,EAAC,SAAS;MACjBxB,QAAQ,EAAEU;IAAe,CAC1B,CACF;EAAA,CACG,CAAC;AAEX,CAAC;AAED,eAAed,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}