{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { crop, flip, resize, rotate } from \"./actions/index.web\";\nimport { getContext } from \"./utils/getContext.web\";\nfunction getResults(canvas, options) {\n  var uri;\n  if (options) {\n    var _options$compress;\n    var _options$format = options.format,\n      format = _options$format === void 0 ? 'png' : _options$format;\n    if (options.format === 'png' && options.compress !== undefined) {\n      console.warn('compress is not supported with png format.');\n    }\n    var quality = Math.min(1, Math.max(0, (_options$compress = options.compress) != null ? _options$compress : 1));\n    uri = canvas.toDataURL('image/' + format, quality);\n  } else {\n    uri = canvas.toDataURL();\n  }\n  return {\n    uri: uri,\n    width: canvas.width,\n    height: canvas.height,\n    base64: uri.replace(/^data:image\\/\\w+;base64,/, '')\n  };\n}\nfunction loadImageAsync(uri) {\n  return new Promise(function (resolve, reject) {\n    var imageSource = new Image();\n    imageSource.crossOrigin = 'anonymous';\n    var canvas = document.createElement('canvas');\n    imageSource.onload = function () {\n      canvas.width = imageSource.naturalWidth;\n      canvas.height = imageSource.naturalHeight;\n      var context = getContext(canvas);\n      context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n      resolve(canvas);\n    };\n    imageSource.onerror = function () {\n      return reject(canvas);\n    };\n    imageSource.src = uri;\n  });\n}\nexport default {\n  get name() {\n    return 'ExpoImageManipulator';\n  },\n  manipulateAsync: function () {\n    var _manipulateAsync = _asyncToGenerator(function* (uri) {\n      var actions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      var originalCanvas = yield loadImageAsync(uri);\n      var resultCanvas = actions.reduce(function (canvas, action) {\n        if ('crop' in action) {\n          return crop(canvas, action.crop);\n        } else if ('resize' in action) {\n          return resize(canvas, action.resize);\n        } else if ('flip' in action) {\n          return flip(canvas, action.flip);\n        } else if ('rotate' in action) {\n          return rotate(canvas, action.rotate);\n        } else {\n          return canvas;\n        }\n      }, originalCanvas);\n      return getResults(resultCanvas, options);\n    });\n    function manipulateAsync(_x) {\n      return _manipulateAsync.apply(this, arguments);\n    }\n    return manipulateAsync;\n  }()\n};","map":{"version":3,"names":["crop","flip","resize","rotate","getContext","getResults","canvas","options","uri","_options$compress","_options$format","format","compress","undefined","console","warn","quality","Math","min","max","toDataURL","width","height","base64","replace","loadImageAsync","Promise","resolve","reject","imageSource","Image","crossOrigin","document","createElement","onload","naturalWidth","naturalHeight","context","drawImage","onerror","src","name","manipulateAsync","_manipulateAsync","_asyncToGenerator","actions","arguments","length","originalCanvas","resultCanvas","reduce","action","_x","apply"],"sources":["C:\\Users\\dyarb\\batcave\\Meetup_2.0\\client\\node_modules\\expo-image-manipulator\\src\\ExpoImageManipulator.web.ts"],"sourcesContent":["import { ImageResult, SaveOptions, Action } from './ImageManipulator.types';\nimport { crop, flip, resize, rotate } from './actions/index.web';\nimport { getContext } from './utils/getContext.web';\n\nfunction getResults(canvas: HTMLCanvasElement, options?: SaveOptions): ImageResult {\n  let uri: string;\n  if (options) {\n    const { format = 'png' } = options;\n    if (options.format === 'png' && options.compress !== undefined) {\n      console.warn('compress is not supported with png format.');\n    }\n    const quality = Math.min(1, Math.max(0, options.compress ?? 1));\n    uri = canvas.toDataURL('image/' + format, quality);\n  } else {\n    // defaults to PNG with no loss\n    uri = canvas.toDataURL();\n  }\n  return {\n    uri,\n    width: canvas.width,\n    height: canvas.height,\n    base64: uri.replace(/^data:image\\/\\w+;base64,/, ''),\n  };\n}\n\nfunction loadImageAsync(uri: string): Promise<HTMLCanvasElement> {\n  return new Promise((resolve, reject) => {\n    const imageSource = new Image();\n    imageSource.crossOrigin = 'anonymous';\n    const canvas = document.createElement('canvas');\n    imageSource.onload = () => {\n      canvas.width = imageSource.naturalWidth;\n      canvas.height = imageSource.naturalHeight;\n\n      const context = getContext(canvas);\n      context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n\n      resolve(canvas);\n    };\n    imageSource.onerror = () => reject(canvas);\n    imageSource.src = uri;\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoImageManipulator';\n  },\n  async manipulateAsync(\n    uri: string,\n    actions: Action[] = [],\n    options: SaveOptions\n  ): Promise<ImageResult> {\n    const originalCanvas = await loadImageAsync(uri);\n\n    const resultCanvas = actions.reduce((canvas, action) => {\n      if ('crop' in action) {\n        return crop(canvas, action.crop);\n      } else if ('resize' in action) {\n        return resize(canvas, action.resize);\n      } else if ('flip' in action) {\n        return flip(canvas, action.flip);\n      } else if ('rotate' in action) {\n        return rotate(canvas, action.rotate);\n      } else {\n        return canvas;\n      }\n    }, originalCanvas);\n\n    return getResults(resultCanvas, options);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}